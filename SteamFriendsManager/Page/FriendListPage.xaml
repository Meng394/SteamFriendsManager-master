<UserControl
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:utils="clr-namespace:SteamFriendsManager.Utility"
    x:Class="SteamFriendsManager.Page.FriendListPage"
    mc:Ignorable="d"
    d:DesignHeight="600"
    d:DesignWidth="870">
    <UserControl.Resources>
        <Style x:Key="FriendListViewItemStyle" TargetType="{x:Type ListViewItem}">
            <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="MinHeight" Value="25" />
            <Setter Property="BorderBrush" Value="{DynamicResource GrayBrush1}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid>
                                <ContentPresenter x:Name="contentPresenter"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                  Visibility="Collapsed" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                <Setter Property="Visibility" TargetName="contentPresenter" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#FF143C65" />
                                <Setter Property="Background" TargetName="Bd"
                                        Value="{DynamicResource AccentColorBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource AccentSelectedColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="Bd"
                                        Value="{DynamicResource AccentColorBrush3}" />
                                <Setter Property="utils:DragSelectionHelper.IsDragSelecting" Value="True" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True" />
                                    <Condition Property="Selector.IsSelectionActive" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd"
                                        Value="{DynamicResource AccentColorBrush2}" />
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#FF143C65" />
                                <Setter Property="Foreground" Value="{DynamicResource AccentSelectedColorBrush}" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsEnabled" Value="False" />
                                    <Condition Property="IsSelected" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource GrayBrush7}" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="OperationButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter>
                            <Setter.Property>Control.Template</Setter.Property>
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Rectangle Margin="8" SnapsToDevicePixels="True"
                                               Stroke="{DynamicResource BlackBrush}" StrokeThickness="1"
                                               StrokeDashArray="2 2" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Rectangle Fill="{TemplateBinding Background}" StrokeThickness="0" />
                            <Rectangle x:Name="bg" Fill="{DynamicResource BlackBrush}" Opacity="0" StrokeThickness="0" />
                            <Rectangle x:Name="hoverbg" Fill="{DynamicResource BlackBrush}" Opacity="0"
                                       StrokeThickness="0" />
                            <ContentPresenter x:Name="content" ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" From="0" To="0.3"
                                                             Storyboard.TargetProperty="Opacity"
                                                             Storyboard.TargetName="bg" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.5" To="0"
                                                             Storyboard.TargetProperty="Opacity"
                                                             Storyboard.TargetName="bg" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Opacity" TargetName="hoverbg" Value="0.1" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Opacity" TargetName="hoverbg" Value="0" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource GrayBrush7}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <UserControl.DataContext>
        <Binding Mode="OneTime" Path="FriendListPage" Source="{StaticResource Locator}" />
    </UserControl.DataContext>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="469*" />
            <ColumnDefinition Width="401*" />
        </Grid.ColumnDefinitions>
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="SelectionVisualStateGroup">
                <VisualState x:Name="SelectedOne" />
                <VisualState x:Name="SelectedMany">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(ContentControl.Content)"
                                                       Storyboard.TargetName="SendMessageButtonText">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="群发消息" />
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                       Storyboard.TargetName="DeleteFriendButtonIcon">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                       Storyboard.TargetName="DeleteFriendsButtonIcon">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                       Storyboard.TargetName="SendMessageButtonIcon">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                       Storyboard.TargetName="SendMessagesButtonIcon">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(ContentControl.Content)"
                                                       Storyboard.TargetName="DeleteFriendButtonText">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="批量删除" />
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
                <VisualState x:Name="SelectedNone">
                    <Storyboard>
                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsEnabled)"
                                                        Storyboard.TargetName="SendMessageButton">
                            <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                        </BooleanAnimationUsingKeyFrames>
                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsEnabled)"
                                                        Storyboard.TargetName="RemoveFriendButton">
                            <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                        </BooleanAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        <i:Interaction.Triggers>
            <i:DataTrigger Binding="{Binding SelectedItems.Count, ElementName=FriendListView, Mode=OneWay}" Value="0">
                <i:GoToStateAction StateName="SelectedNone" />
            </i:DataTrigger>
            <i:DataTrigger Binding="{Binding SelectedItems.Count, ElementName=FriendListView, Mode=OneWay}" Value="1">
                <i:GoToStateAction StateName="SelectedOne" />
            </i:DataTrigger>
            <i:DataTrigger Binding="{Binding SelectedItems.Count, ElementName=FriendListView, Mode=OneWay}" Value="1"
                           Comparison="GreaterThan">
                <i:GoToStateAction StateName="SelectedMany" />
            </i:DataTrigger>
            <i:EventTrigger>
                <i:GoToStateAction StateName="SelectedNone" />
            </i:EventTrigger>
        </i:Interaction.Triggers>
        <Grid.RowDefinitions>
            <RowDefinition Height="72" />
            <RowDefinition />
        </Grid.RowDefinitions>
        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Height="58" Margin="15,12,8,2">
            <Button Style="{DynamicResource OperationButtonStyle}" Margin="5, 0" Width="60"
                    Command="{Binding SwitchAccount, Mode=OneWay}">
                <StackPanel Margin="0, 7, 0, 0">
                    <Rectangle Width="25" Height="25"
                               Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_door_leave}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <Label FontFamily="Microsoft YaHei UI">切换帐号</Label>
                </StackPanel>
            </Button>
            <Button x:Name="SendMessageButton" Style="{DynamicResource OperationButtonStyle}" Margin="5, 0" Width="60"
                    Command="{Binding SendChatMessage, Mode=OneWay}"
                    CommandParameter="{Binding Path=SelectedItems, ElementName=FriendListView}">
                <StackPanel Margin="0, 5, 0, 0">
                    <Rectangle Width="25" Height="25" x:Name="SendMessageButtonIcon"
                               Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_message_send}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <Rectangle Width="30" Height="25" x:Name="SendMessagesButtonIcon"
                               Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                               Visibility="Collapsed">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill">
                                <VisualBrush.Visual>
                                    <Canvas Height="25" Width="25">
                                        <Rectangle Width="25" Height="25"
                                                   Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                                   Canvas.Top="23">
                                            <Rectangle.OpacityMask>
                                                <VisualBrush Stretch="Fill"
                                                             Visual="{StaticResource appbar_message_send}" />
                                            </Rectangle.OpacityMask>
                                        </Rectangle>
                                        <Rectangle Width="25" Height="25"
                                                   Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                                   Canvas.Left="13">
                                            <Rectangle.OpacityMask>
                                                <VisualBrush Stretch="Fill"
                                                             Visual="{StaticResource appbar_message_send}" />
                                            </Rectangle.OpacityMask>
                                        </Rectangle>
                                        <Rectangle Width="25" Height="25"
                                                   Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                                   Canvas.Left="28" Canvas.Top="23">
                                            <Rectangle.OpacityMask>
                                                <VisualBrush Stretch="Fill"
                                                             Visual="{StaticResource appbar_message_send}" />
                                            </Rectangle.OpacityMask>
                                        </Rectangle>
                                    </Canvas>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <Label x:Name="SendMessageButtonText" FontFamily="Microsoft YaHei UI">发送消息</Label>
                </StackPanel>
            </Button>
            <Button Style="{DynamicResource OperationButtonStyle}" Margin="5, 0" Width="60"
                    Command="{Binding AddFriend, Mode=OneWay}">
                <StackPanel Margin="0, 5, 0, 0">
                    <Rectangle Width="25" Height="25"
                               Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_user_add}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <Label FontFamily="Microsoft YaHei UI">添加好友</Label>
                </StackPanel>
            </Button>
            <Button x:Name="RemoveFriendButton" Style="{DynamicResource OperationButtonStyle}" Margin="5, 0" Width="60"
                    Command="{Binding RemoveFriend, Mode=OneWay}"
                    CommandParameter="{Binding Path=SelectedItems, ElementName=FriendListView}">
                <StackPanel Margin="0, 5, 0, 0">
                    <Rectangle x:Name="DeleteFriendButtonIcon" Width="25" Height="25"
                               Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_user_delete}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <Rectangle x:Name="DeleteFriendsButtonIcon" Visibility="Collapsed" Width="25" Height="25"
                               Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_group_delete}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <Label x:Name="DeleteFriendButtonText" FontFamily="Microsoft YaHei UI">删除好友</Label>
                </StackPanel>
            </Button>
            <Button Style="{DynamicResource OperationButtonStyle}" Margin="5, 0" Width="60"
                    Command="{Binding ChangePersonaName, Mode=OneWay}">
                <StackPanel Margin="0, 5, 0, 0">
                    <Rectangle Width="25" Height="25"
                               Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_page_edit}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <Label FontFamily="Microsoft YaHei UI">修改昵称</Label>
                </StackPanel>
            </Button>
            <Button x:Name="SwitchStateButton" Style="{DynamicResource OperationButtonStyle}" Margin="5, 0" Width="60"
                    ContextMenuService.Placement="Bottom">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:ChangePropertyAction TargetName="SwitchOnlineStateContextMenu"
                                                PropertyName="PlacementTarget"
                                                Value="{Binding ElementName=SwitchStateButton}" />
                        <i:ChangePropertyAction TargetName="SwitchOnlineStateContextMenu" PropertyName="Placement">
                            <i:ChangePropertyAction.Value>
                                <PlacementMode>Bottom</PlacementMode>
                            </i:ChangePropertyAction.Value>
                        </i:ChangePropertyAction>
                        <i:ChangePropertyAction TargetName="SwitchOnlineStateContextMenu" PropertyName="IsOpen"
                                                Value="True" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Button.ContextMenu>
                    <ContextMenu x:Name="SwitchOnlineStateContextMenu">
                        <MenuItem Header="在线" Command="{Binding SwitchPersonaState, Mode=OneWay}"
                                  CommandParameter="{Binding Source=Online, Mode=OneTime, Converter={StaticResource SteamPersonaStateConverter}}" />
                        <MenuItem Header="隐身" Command="{Binding SwitchPersonaState, Mode=OneWay}"
                                  CommandParameter="{Binding Source=Invisible, Mode=OneTime, Converter={StaticResource SteamPersonaStateConverter}}" />
                        <MenuItem Header="离开" Command="{Binding SwitchPersonaState, Mode=OneWay}"
                                  CommandParameter="{Binding Source=Away, Mode=OneTime, Converter={StaticResource SteamPersonaStateConverter}}" />
                        <MenuItem Header="忙碌" Command="{Binding SwitchPersonaState, Mode=OneWay}"
                                  CommandParameter="{Binding Source=Busy, Mode=OneTime, Converter={StaticResource SteamPersonaStateConverter}}" />
                        <MenuItem Header="想玩游戏" Command="{Binding SwitchPersonaState, Mode=OneWay}"
                                  CommandParameter="{Binding Source=LookingToPlay, Mode=OneTime, Converter={StaticResource SteamPersonaStateConverter}}" />
                        <MenuItem Header="想交易" Command="{Binding SwitchPersonaState, Mode=OneWay}"
                                  CommandParameter="{Binding Source=LookingToTrade, Mode=OneTime, Converter={StaticResource SteamPersonaStateConverter}}" />
                        <MenuItem Header="打盹" Command="{Binding SwitchPersonaState, Mode=OneWay}"
                                  CommandParameter="{Binding Source=Snooze, Mode=OneTime, Converter={StaticResource SteamPersonaStateConverter}}" />
                        <MenuItem Header="离线" Command="{Binding SwitchPersonaState, Mode=OneWay}"
                                  CommandParameter="{Binding Source=Offline, Mode=OneTime, Converter={StaticResource SteamPersonaStateConverter}}" />
                    </ContextMenu>
                </Button.ContextMenu>
                <StackPanel Margin="0, 5, 0, 0">
                    <Rectangle Width="25" Height="25"
                               Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_people_status}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <Label FontFamily="Microsoft YaHei UI">切换状态</Label>
                </StackPanel>
            </Button>

        </StackPanel>
        <Grid Margin="7,0,15,2" Grid.Row="0" Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center"
                        Margin="0,4,0,0">
                <Label Content="{Binding PersonaName, Mode=OneWay}" FontSize="14" />
                <Label Content="{Binding PersonaState, Mode=OneWay}" FontSize="14" />
            </StackPanel>
            <TextBox Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Right" Width="284"
                     FontFamily="Microsoft YaHei"
                     metro:TextBoxHelper.Watermark="搜索..."
                     metro:TextBoxHelper.ClearTextButton="True"
                     Text="{Binding SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                <TextBox.Style>
                    <!-- ReSharper disable once Xaml.StaticResourceNotResolved -->
                    <Style TargetType="{x:Type TextBox}"
                           BasedOn="{StaticResource SearchMetroTextBox}">
                        <Style.Triggers>
                            <Trigger Property="metro:TextBoxHelper.HasText"
                                     Value="True">
                                <Setter Property="metro:TextBoxHelper.ButtonTemplate"
                                        Value="{DynamicResource ChromelessButtonTemplate}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Style>
            </TextBox>
        </Grid>
        <ListView x:Name="FriendListView" Grid.Row="1" ItemsSource="{Binding Friends, Mode=OneWay, IsAsync=True}"
                  Margin="15, 0, 15, 10" utils:DragSelectionHelper.IsDragSelectionEnabled="True"
                  ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                  ItemContainerStyle="{DynamicResource FriendListViewItemStyle}" BorderThickness="0"
                  Grid.ColumnSpan="2"
                  Grid.Column="0">
            <ListView.ItemsPanel>
                <ItemsPanelTemplate>
                    <utils:AnimatedWrapPanel IsItemsHost="True" Margin="5" />
                </ItemsPanelTemplate>
            </ListView.ItemsPanel>
            <ListView.ItemTemplate>
                <DataTemplate>
                    <Grid x:Name="grid" Height="65" Width="265"
                          Visibility="{Binding Visible, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay}">
                        <!--<i:Interaction.Triggers>
                    		<i:EventTrigger>
                    			<ei:GoToStateAction StateName="Visible"/>
                    		</i:EventTrigger>
                    	</i:Interaction.Triggers>
                    	<i:Interaction.Behaviors>
                    		<ei:DataStateBehavior Binding="{Binding Visible, Mode=OneWay}" TrueState="Visible" FalseState="Collapsed">
                    			<ei:DataStateBehavior.Value>
                    				<system:Boolean>True</system:Boolean>
								</ei:DataStateBehavior.Value>
							</ei:DataStateBehavior>
                    	</i:Interaction.Behaviors>-->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="VisibilityVisualStateGroup">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Visible" GeneratedDuration="0:0:0.1" To="Collapsed">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.1" To="0"
                                                             Storyboard.TargetProperty="(UIElement.Opacity)"
                                                             Storyboard.TargetName="grid" />
                                            <ObjectAnimationUsingKeyFrames
                                                Storyboard.TargetProperty="(UIElement.Visibility)"
                                                Storyboard.TargetName="grid">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0.1"
                                                                        Value="{x:Static Visibility.Collapsed}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Collapsed" GeneratedDuration="0:0:0.1" To="Visible">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames
                                                Storyboard.TargetProperty="(UIElement.Visibility)"
                                                Storyboard.TargetName="grid">
                                                <DiscreteObjectKeyFrame KeyTime="0"
                                                                        Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Visible" />
                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.Visibility)"
                                            Storyboard.TargetName="grid">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="65" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <utils:Image Margin="3" Stretch="UniformToFill"
                                     ImageUrl="{Binding Avatar, Mode=OneWay, Converter={StaticResource SteamFriendAvatarConverter}}" />
                        <StackPanel Grid.Column="1" Grid.Row="0" VerticalAlignment="Center">
                            <Label Content="{Binding PersonaName, Mode=OneWay}"
                                   Foreground="{Binding PersonaStateColor, Mode=OneWay}"
                                   FontFamily="Microsoft YaHei UI" VerticalAlignment="Center" FontSize="16"
                                   ToolTip="{Binding PersonaName, Mode=OneWay}" />
                            <Label
                                Content="{Binding PersonaState, Mode=OneWay, Converter={StaticResource SteamPersonaStateDisplayNameConverter}}"
                                FontFamily="Microsoft YaHei UI" VerticalAlignment="Center" FontSize="12"
                                Foreground="{Binding PersonaStateColor, Mode=OneWay}"
                                ToolTip="{Binding PersonaState, Mode=OneWay, Converter={StaticResource SteamPersonaStateDisplayNameConverter}}" />
                        </StackPanel>
                    </Grid>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>
    </Grid>
</UserControl>